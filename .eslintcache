[{"C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\index.js":"1","C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\reportWebVitals.js":"2","C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\App.js":"3","C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\Form.jsx":"4","C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\options.js":"5"},{"size":456,"mtime":1611933546000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":211,"mtime":1611934878000,"results":"9","hashOfConfig":"7"},{"size":3496,"mtime":1611940412000,"results":"10","hashOfConfig":"7"},{"size":4045,"mtime":1611934664000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1tpxi54",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\index.js",[],["24","25"],"C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\reportWebVitals.js",[],"C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\App.js",[],"C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\Form.jsx",["26"],"import { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  TextField,\r\n  Chip,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { options, dataTemplate } from \"./options\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport faker from \"faker\";\r\nimport download from \"downloadjs\";\r\n\r\nconst categories = Object.keys(options);\r\n// console.log(categories);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: \"100%\",\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n}));\r\n\r\nconst Form = (props) => {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState(dataTemplate);\r\n  const [numberOfData, setNumberOfData] = useState(1);\r\n  const handleChange = (event) => {\r\n    console.log(event.target.name, event.target.value);\r\n    let copyData = { ...data };\r\n    copyData[event.target.name] = {};\r\n    event.target.value.forEach((item) => {\r\n      copyData[event.target.name][item] = \"\";\r\n    });\r\n    setData(copyData);\r\n  };\r\n\r\n  const generateData = () => {\r\n    let copyData = JSON.parse(JSON.stringify(options));\r\n    let arrData = [];\r\n    for (let i = 0; i < numberOfData; i++) {\r\n      for (let category of categories) {\r\n        for (let key of Object.keys(options[category])) {\r\n          if (data[category][key] != undefined) {\r\n            copyData[category][key] = faker[category][key]();\r\n          }\r\n        }\r\n      }\r\n      arrData.push(copyData);\r\n      copyData = JSON.parse(JSON.stringify(options));\r\n    }\r\n\r\n    download(JSON.stringify(arrData), \"fake_data.json\", \"json\");\r\n    setNumberOfData(1);\r\n    setData(dataTemplate);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        {categories.map((category) => (\r\n          <Grid item sm={3} key={category}>\r\n            <Paper component={Box} p={3}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel>{category}</InputLabel>\r\n                <Select\r\n                  name={category}\r\n                  fullWidth\r\n                  multiple\r\n                  value={Object.keys(data[category])}\r\n                  onChange={handleChange}\r\n                  renderValue={(selected) => (\r\n                    <div className={classes.chips}>\r\n                      {selected.map((value) => (\r\n                        <Chip\r\n                          key={value}\r\n                          label={value}\r\n                          className={classes.chip}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                >\r\n                  {Object.keys(options[category]).map((name) => (\r\n                    <MenuItem key={name} value={name}>\r\n                      {name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Paper>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Paper component={Box} my={1} p={3}>\r\n        <TextField\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          label=\"enter the number of fake data\"\r\n          placeholder=\"Enter the number\"\r\n          value={numberOfData}\r\n          onChange={(e) => setNumberOfData(e.target.value)}\r\n        />\r\n      </Paper>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={generateData}>\r\n        Generate Data\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","C:\\Users\\adihg\\Desktop\\ \\fake-data-generator\\src\\options.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":55,"column":35,"nodeType":"33","messageId":"34","endLine":55,"endColumn":37},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]